use super::cryptertrait::*;
use super::super::aeshmacsha1::*;
pub use super::super::cryptography::AesSizes;

pub struct AESCrypter {
    aes_sizes: AesSizes
}

impl AESCrypter {

    pub fn new(aes_sizes: AesSizes) -> Self {
        return Self{
            aes_sizes
        };
    }

}

impl KerberosCrypter for AESCrypter {

    fn generate_key(&self, key: &[u8], salt: &[u8]) -> Vec<u8> {
        return generate_aes_key(key, salt, &self.aes_sizes);
    }

    fn generate_key_from_password(&self, password: &str, salt: &[u8]) -> Vec<u8> {
        return self.generate_key(password.as_bytes(), salt);
    }

    fn decrypt(&self, key: &[u8], key_usage: i32, ciphertext: &[u8]) -> KerberosResult<Vec<u8>> {
        return aes_hmac_sh1_decrypt(&key, key_usage, ciphertext, &self.aes_sizes);
    }

    fn encrypt(&self, password: &[u8], key_usage: i32, plaintext: &[u8]) -> KerberosResult<Vec<u8>> {
        unimplemented!();
    }

}


#[cfg(test)]
mod test {
    use super::*;
    use crate::constants::*;

    #[test]
    fn test_aes_256_hmac_sh1_encrypt() {
        let aes256_crypter = AESCrypter::new(AesSizes::Aes256);

        assert_eq!(
            vec![0x29, 0x73, 0x7f, 0x3d, 0xb6, 0xbc, 0xdf, 0xe9, 0x99, 0x0f, 0xb2, 0x13, 0x6d, 0x3e, 0xfe, 0x6f, 0x21, 0x00, 0xe6, 0xc4, 0xac, 0x75, 0x82, 0x42, 0x99, 0xd8, 0xd3, 0x70, 0x2f, 0x5a, 0x2e, 0x31, 0xc7, 0xa3, 0x36, 0x74, 0x7d, 0xfd, 0x73, 0x4a, 0x1e, 0xa0, 0x16, 0x5e, 0xbb, 0x27, 0xc0, 0xd7, 0xce, 0x9b, 0x5a, 0xec, 0x7a], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "admin",
                "admin1234".as_bytes(),
                1,
                &[0x33, 0x61, 0x68, 0x77, 0x7a, 0x74, 0x39, 0x4d, 0x47, 0x39, 0x57, 0x56, 0x45, 0x75, 0x42, 0x56, 0x43, 0x35, 0x6a, 0x30, 0x6f, 0x69, 0x36, 0x73, 0x49]
            ).unwrap()
        );


        assert_eq!(
            vec![0x3d, 0x29, 0x1c, 0x68, 0x54, 0x89, 0xe7, 0xb7, 0x5d, 0xab, 0xdc, 0x6e, 0x01, 0x0a, 0xd0, 0x01, 0x9d, 0xb1, 0x64, 0x81, 0xb1, 0x2c, 0xb8, 0xbf, 0xa5, 0x13, 0x61, 0x92, 0x42, 0x76, 0x1f, 0x99, 0x0d, 0xe2, 0xc0, 0x27, 0x66, 0x1c, 0x98, 0x33, 0xbc, 0xce, 0xd3], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "test",
                "test1234".as_bytes(),
                2,
                &[0x6c, 0x4a, 0x33, 0x66, 0x74, 0x66, 0x77, 0x78, 0x6a, 0x73, 0x52, 0x35, 0x32, 0x32, 0x4f]
            ).unwrap()
        );


        assert_eq!(
            vec![0xb4, 0xc9, 0x95, 0x36, 0x2e, 0x8f, 0xb1, 0x7c, 0x5f, 0x8f, 0xcf, 0xc9, 0xe2, 0xe8, 0x26, 0xb9, 0xb2, 0x6f, 0xb4, 0x8c, 0xab, 0x44, 0x29, 0xdf, 0xfd, 0x93, 0x96, 0x59, 0x70, 0xfd, 0xb5, 0x59, 0xb3, 0xdf, 0x3f, 0xa1, 0xe4, 0x33, 0x5f, 0x82, 0xbd, 0xd3, 0x33, 0x1b, 0x60], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "1337",
                "13371234".as_bytes(),
                3,
                &[0x51, 0x42, 0x64, 0x33, 0x69, 0x71, 0x6b, 0x4b, 0x79, 0x5a, 0x72, 0x35, 0x59, 0x4a, 0x62, 0x6c, 0x4e]
            ).unwrap()
        );


        assert_eq!(
            vec![0xff, 0xb5, 0xa2, 0xaa, 0xe1, 0xaa, 0x26, 0x0b, 0xad, 0xcf, 0x5d, 0xcb, 0xe4, 0x3c, 0xdc, 0x30, 0x00, 0x2e, 0x3d, 0x97, 0x05, 0x22, 0xf1, 0x83, 0x95, 0x18, 0xbf, 0x62, 0x46, 0xbb, 0xec, 0x0d, 0x4c, 0x89, 0xb0, 0xc5, 0xb5, 0x81, 0xae], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "",
                "1234".as_bytes(),
                4,
                &[0x64, 0x4d, 0x61, 0x72, 0x7a, 0x4b, 0x43, 0x4f, 0x45, 0x54, 0x37]
            ).unwrap()
        );


        assert_eq!(
            vec![0x53, 0x2b, 0x02, 0xa2, 0xe0, 0xc9, 0x74, 0xb6, 0x79, 0x41, 0xca, 0xc1, 0x21, 0x72, 0x29, 0x50, 0x4f, 0x1f, 0xb2, 0x27, 0xf5, 0xe0, 0x40, 0xb3, 0xd2, 0x5c, 0xf5, 0xdd, 0x0b, 0x1a, 0x3f, 0x3d, 0x93, 0x26, 0x7c, 0xbd, 0x69, 0xa6, 0x24, 0x48, 0x09, 0x3d], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "12345678",
                "123456781234".as_bytes(),
                5,
                &[0x71, 0x75, 0x65, 0x4a, 0x6d, 0x72, 0x78, 0x76, 0x50, 0x47, 0x5a, 0x68, 0x6d, 0x78]
            ).unwrap()
        );


        assert_eq!(
            vec![0x4d, 0x48, 0x34, 0xe8, 0x61, 0x61, 0x8d, 0xa5, 0x8f, 0x27, 0x88, 0xff, 0xa7, 0xeb, 0xbb, 0x23, 0x6a, 0x74, 0x0f, 0x4c, 0xb9, 0x44, 0x79, 0xf7, 0xdc, 0xc3, 0xc3, 0xa3, 0xdc, 0xf2, 0xd6, 0x96, 0x36, 0x8c, 0xb7, 0xf3, 0xcc, 0xc5, 0x8a, 0x29, 0x6e, 0xf8, 0x5d, 0x09, 0xc9, 0xb8, 0x34, 0x0b, 0x93, 0xa0, 0xd8], 
            aes256_crypter.generate_key_from_password_and_encrypt(
                "123456789",
                "1234567891234".as_bytes(),
                6,
                &[0x6d, 0x4a, 0x79, 0x31, 0x42, 0x6d, 0x74, 0x54, 0x39, 0x33, 0x31, 0x56, 0x72, 0x50, 0x63, 0x6b, 0x38, 0x6c, 0x61, 0x4e, 0x77, 0x32, 0x56]
            ).unwrap()
        );
        
    }

    #[test]
    fn test_aes_256_hmac_sh1_decrypt() {
        let aes256_crypter = AESCrypter::new(AesSizes::Aes256);

        assert_eq!(
            vec![0x33, 0x61, 0x68, 0x77, 0x7a, 0x74, 0x39, 0x4d, 0x47, 0x39, 0x57, 0x56, 0x45, 0x75, 0x42, 0x56, 0x43, 0x35, 0x6a, 0x30, 0x6f, 0x69, 0x36, 0x73, 0x49], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "admin",
                "admin1234".as_bytes(),
                1,
                &[0x29, 0x73, 0x7f, 0x3d, 0xb6, 0xbc, 0xdf, 0xe9, 0x99, 0x0f, 0xb2, 0x13, 0x6d, 0x3e, 0xfe, 0x6f, 0x21, 0x00, 0xe6, 0xc4, 0xac, 0x75, 0x82, 0x42, 0x99, 0xd8, 0xd3, 0x70, 0x2f, 0x5a, 0x2e, 0x31, 0xc7, 0xa3, 0x36, 0x74, 0x7d, 0xfd, 0x73, 0x4a, 0x1e, 0xa0, 0x16, 0x5e, 0xbb, 0x27, 0xc0, 0xd7, 0xce, 0x9b, 0x5a, 0xec, 0x7a]
            ).unwrap()
        );


        assert_eq!(
            vec![0x6c, 0x4a, 0x33, 0x66, 0x74, 0x66, 0x77, 0x78, 0x6a, 0x73, 0x52, 0x35, 0x32, 0x32, 0x4f], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "test",
                "test1234".as_bytes(),
                2,
                &[0x3d, 0x29, 0x1c, 0x68, 0x54, 0x89, 0xe7, 0xb7, 0x5d, 0xab, 0xdc, 0x6e, 0x01, 0x0a, 0xd0, 0x01, 0x9d, 0xb1, 0x64, 0x81, 0xb1, 0x2c, 0xb8, 0xbf, 0xa5, 0x13, 0x61, 0x92, 0x42, 0x76, 0x1f, 0x99, 0x0d, 0xe2, 0xc0, 0x27, 0x66, 0x1c, 0x98, 0x33, 0xbc, 0xce, 0xd3]
            ).unwrap()
        );

        assert_eq!(
            vec![0x51, 0x42, 0x64, 0x33, 0x69, 0x71, 0x6b, 0x4b, 0x79, 0x5a, 0x72, 0x35, 0x59, 0x4a, 0x62, 0x6c, 0x4e], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "1337",
                "13371234".as_bytes(),
                3,
                &[0xb4, 0xc9, 0x95, 0x36, 0x2e, 0x8f, 0xb1, 0x7c, 0x5f, 0x8f, 0xcf, 0xc9, 0xe2, 0xe8, 0x26, 0xb9, 0xb2, 0x6f, 0xb4, 0x8c, 0xab, 0x44, 0x29, 0xdf, 0xfd, 0x93, 0x96, 0x59, 0x70, 0xfd, 0xb5, 0x59, 0xb3, 0xdf, 0x3f, 0xa1, 0xe4, 0x33, 0x5f, 0x82, 0xbd, 0xd3, 0x33, 0x1b, 0x60]
            ).unwrap()
        );

        assert_eq!(
            vec![0x64, 0x4d, 0x61, 0x72, 0x7a, 0x4b, 0x43, 0x4f, 0x45, 0x54, 0x37], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "",
                "1234".as_bytes(),
                4,
                &[0xff, 0xb5, 0xa2, 0xaa, 0xe1, 0xaa, 0x26, 0x0b, 0xad, 0xcf, 0x5d, 0xcb, 0xe4, 0x3c, 0xdc, 0x30, 0x00, 0x2e, 0x3d, 0x97, 0x05, 0x22, 0xf1, 0x83, 0x95, 0x18, 0xbf, 0x62, 0x46, 0xbb, 0xec, 0x0d, 0x4c, 0x89, 0xb0, 0xc5, 0xb5, 0x81, 0xae]
            ).unwrap()
        );


        assert_eq!(
            vec![0x71, 0x75, 0x65, 0x4a, 0x6d, 0x72, 0x78, 0x76, 0x50, 0x47, 0x5a, 0x68, 0x6d, 0x78], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "12345678",
                "123456781234".as_bytes(),
                5,
                &[0x53, 0x2b, 0x02, 0xa2, 0xe0, 0xc9, 0x74, 0xb6, 0x79, 0x41, 0xca, 0xc1, 0x21, 0x72, 0x29, 0x50, 0x4f, 0x1f, 0xb2, 0x27, 0xf5, 0xe0, 0x40, 0xb3, 0xd2, 0x5c, 0xf5, 0xdd, 0x0b, 0x1a, 0x3f, 0x3d, 0x93, 0x26, 0x7c, 0xbd, 0x69, 0xa6, 0x24, 0x48, 0x09, 0x3d]
            ).unwrap()
        );


        assert_eq!(
            vec![0x6d, 0x4a, 0x79, 0x31, 0x42, 0x6d, 0x74, 0x54, 0x39, 0x33, 0x31, 0x56, 0x72, 0x50, 0x63, 0x6b, 0x38, 0x6c, 0x61, 0x4e, 0x77, 0x32, 0x56], 
            aes256_crypter.generate_key_from_password_and_decrypt(
                "123456789",
                "1234567891234".as_bytes(),
                6,
                &[0x4d, 0x48, 0x34, 0xe8, 0x61, 0x61, 0x8d, 0xa5, 0x8f, 0x27, 0x88, 0xff, 0xa7, 0xeb, 0xbb, 0x23, 0x6a, 0x74, 0x0f, 0x4c, 0xb9, 0x44, 0x79, 0xf7, 0xdc, 0xc3, 0xc3, 0xa3, 0xdc, 0xf2, 0xd6, 0x96, 0x36, 0x8c, 0xb7, 0xf3, 0xcc, 0xc5, 0x8a, 0x29, 0x6e, 0xf8, 0x5d, 0x09, 0xc9, 0xb8, 0x34, 0x0b, 0x93, 0xa0, 0xd8]
            ).unwrap()
        );
    }

    #[test]
    fn test_aes_128_hmac_sh1_encrypt() {
        let aes128_crypter = AESCrypter::new(AesSizes::Aes128);

        assert_eq!(
            vec![0xfe, 0x93, 0xe5, 0x9a, 0xd6, 0x5b, 0x68, 0x95, 0x0a, 0x3b, 0x2e, 0x2e, 0xa3, 0xc0, 0xd1, 0x49, 0x0f, 0x7a, 0x90, 0x72, 0x62, 0x8f, 0x6f, 0x6a, 0xa8, 0x95, 0x89, 0xd2, 0x79, 0x28, 0x89, 0xfc, 0xc3, 0xc0, 0xc1, 0x68, 0x5d, 0x80, 0x78, 0xd8, 0xe2, 0xd3, 0x3f, 0x80], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "admin",
                "admin1234".as_bytes(),
                1,
                &[0x66, 0x4e, 0x59, 0x4b, 0x65, 0x53, 0x56, 0x44, 0x4d, 0x54, 0x39, 0x6a, 0x63, 0x68, 0x53, 0x41, 0x58, 0x66, 0x55, 0x46, 0x38, 0x56, 0x73, 0x53]
            ).unwrap()
        );

        assert_eq!(
            vec![0xb2, 0x17, 0xc2, 0x9d, 0x0c, 0x21, 0x80, 0x97, 0x64, 0x75, 0xa2, 0xef, 0xbb, 0xd3, 0x0c, 0xb8, 0x9c, 0x20, 0x60, 0x1a, 0x31, 0x89, 0x19, 0xa9, 0x6e, 0x4e, 0x7a, 0x84, 0x4d, 0xe4, 0x7a, 0x23, 0x87, 0x76, 0x76, 0x6a, 0x77, 0x9b, 0x2f, 0xc7, 0xd1, 0xa9], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "test",
                "test1234".as_bytes(),
                2,
                &[0x74, 0x75, 0x53, 0x51, 0x65, 0x65, 0x6e, 0x69, 0x4b, 0x6a, 0x46, 0x63, 0x49, 0x31, 0x75, 0x35, 0x47, 0x39, 0x69, 0x7a, 0x35, 0x6f]
            ).unwrap()
        );

        assert_eq!(
            vec![0x43, 0x8a, 0x82, 0xb1, 0x46, 0x2d, 0x13, 0x02, 0xf3, 0x12, 0x63, 0x5c, 0x81, 0x79, 0xe0, 0xc3, 0x9d, 0xaa, 0xd1, 0x7a, 0x49, 0x13, 0x05, 0xce, 0x78, 0x4b, 0x20, 0x1d, 0xad, 0x82, 0xa9, 0xde, 0x27, 0x20, 0x7c, 0x78], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "1337",
                "13371234".as_bytes(),
                3,
                &[0x51, 0x67, 0x67, 0x50, 0x42, 0x4a, 0x62, 0x37, 0x75, 0x59, 0x44, 0x6a, 0x63, 0x49, 0x58, 0x34]
            ).unwrap()
        );

        assert_eq!(
            vec![0x0b, 0xd3, 0xe2, 0x56, 0x33, 0xbf, 0x5c, 0x6f, 0xe1, 0x5e, 0x09, 0x96, 0xa8, 0xa5, 0x61, 0xe3, 0x5b, 0x71, 0xe9, 0xf2, 0x50, 0x99, 0xf2, 0xc5, 0x57, 0x80, 0x01, 0x96, 0x4e, 0xc4, 0x18, 0x0f, 0xfe, 0x8c, 0x72, 0x8f, 0xc2, 0xde, 0x25, 0x6a, 0x96, 0x02, 0x1d, 0x0b, 0xb4, 0xd7, 0x19, 0x4b], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "",
                "1234".as_bytes(),
                4,
                &[0x53, 0x77, 0x75, 0x6d, 0x50, 0x5a, 0x63, 0x56, 0x77, 0x4d, 0x41, 0x4c, 0x32, 0x37, 0x68, 0x46, 0x44, 0x72, 0x39, 0x6a, 0x49, 0x79, 0x34, 0x70, 0x52, 0x52, 0x4d, 0x75]
            ).unwrap()
        );

        assert_eq!(
            vec![0x75, 0x8b, 0x0e, 0x98, 0x4f, 0x82, 0x76, 0xee, 0x0b, 0x53, 0xb4, 0xe4, 0x52, 0xa2, 0x24, 0x33, 0xe2, 0x48, 0xd4, 0xb0, 0x3b, 0xa4, 0xd9, 0x3d, 0xc4, 0x89, 0x2c, 0x8b, 0xf2, 0xbc, 0x24, 0xf1, 0x8c, 0xc4, 0xec, 0x71, 0xb8, 0xbf, 0x9f, 0x5d, 0x92, 0xa9, 0x89, 0x1a, 0x0d, 0xf7], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "12345678",
                "123456781234".as_bytes(),
                5,
                &[0x47, 0x57, 0x6c, 0x66, 0x34, 0x72, 0x36, 0x51, 0x65, 0x51, 0x4c, 0x6b, 0x42, 0x39, 0x4d, 0x67, 0x38, 0x4c, 0x79, 0x34, 0x51, 0x50, 0x4a, 0x36, 0x4f, 0x4b]
            ).unwrap()
        );

        assert_eq!(
            vec![0x44, 0x16, 0xdb, 0x3f, 0x25, 0x56, 0x1a, 0xe6, 0x9b, 0x6a, 0x39, 0x53, 0x7c, 0xf9, 0x83, 0x83, 0xc0, 0x4e, 0x13, 0xae, 0x04, 0xa8, 0xfb, 0x9c, 0xe3, 0xce, 0xfb, 0x27, 0x55, 0x0d, 0x81, 0x8a, 0x8c, 0xad], 
            aes128_crypter.generate_key_from_password_and_encrypt(
                "123456789",
                "1234567891234".as_bytes(),
                6,
                &[0x51, 0x7a, 0x30, 0x77, 0x35, 0x61, 0x77, 0x72, 0x6a, 0x6a, 0x68, 0x46, 0x30, 0x4b]
            ).unwrap()
        );

    }

    #[test]
    fn test_aes_128_hmac_sh1_decrypt() {
        let aes128_crypter = AESCrypter::new(AesSizes::Aes128);

        assert_eq!(
            vec![0x66, 0x4e, 0x59, 0x4b, 0x65, 0x53, 0x56, 0x44, 0x4d, 0x54, 0x39, 0x6a, 0x63, 0x68, 0x53, 0x41, 0x58, 0x66, 0x55, 0x46, 0x38, 0x56, 0x73, 0x53], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "admin",
                "admin1234".as_bytes(),
                1,
                &[0xfe, 0x93, 0xe5, 0x9a, 0xd6, 0x5b, 0x68, 0x95, 0x0a, 0x3b, 0x2e, 0x2e, 0xa3, 0xc0, 0xd1, 0x49, 0x0f, 0x7a, 0x90, 0x72, 0x62, 0x8f, 0x6f, 0x6a, 0xa8, 0x95, 0x89, 0xd2, 0x79, 0x28, 0x89, 0xfc, 0xc3, 0xc0, 0xc1, 0x68, 0x5d, 0x80, 0x78, 0xd8, 0xe2, 0xd3, 0x3f, 0x80]
            ).unwrap()
        );

        assert_eq!(
            vec![0x74, 0x75, 0x53, 0x51, 0x65, 0x65, 0x6e, 0x69, 0x4b, 0x6a, 0x46, 0x63, 0x49, 0x31, 0x75, 0x35, 0x47, 0x39, 0x69, 0x7a, 0x35, 0x6f], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "test",
                "test1234".as_bytes(),
                2,
                &[0xb2, 0x17, 0xc2, 0x9d, 0x0c, 0x21, 0x80, 0x97, 0x64, 0x75, 0xa2, 0xef, 0xbb, 0xd3, 0x0c, 0xb8, 0x9c, 0x20, 0x60, 0x1a, 0x31, 0x89, 0x19, 0xa9, 0x6e, 0x4e, 0x7a, 0x84, 0x4d, 0xe4, 0x7a, 0x23, 0x87, 0x76, 0x76, 0x6a, 0x77, 0x9b, 0x2f, 0xc7, 0xd1, 0xa9]
            ).unwrap()
        );

        assert_eq!(
            vec![0x51, 0x67, 0x67, 0x50, 0x42, 0x4a, 0x62, 0x37, 0x75, 0x59, 0x44, 0x6a, 0x63, 0x49, 0x58, 0x34], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "1337",
                "13371234".as_bytes(),
                3,
                &[0x43, 0x8a, 0x82, 0xb1, 0x46, 0x2d, 0x13, 0x02, 0xf3, 0x12, 0x63, 0x5c, 0x81, 0x79, 0xe0, 0xc3, 0x9d, 0xaa, 0xd1, 0x7a, 0x49, 0x13, 0x05, 0xce, 0x78, 0x4b, 0x20, 0x1d, 0xad, 0x82, 0xa9, 0xde, 0x27, 0x20, 0x7c, 0x78]
            ).unwrap()
        );

        assert_eq!(
            vec![0x53, 0x77, 0x75, 0x6d, 0x50, 0x5a, 0x63, 0x56, 0x77, 0x4d, 0x41, 0x4c, 0x32, 0x37, 0x68, 0x46, 0x44, 0x72, 0x39, 0x6a, 0x49, 0x79, 0x34, 0x70, 0x52, 0x52, 0x4d, 0x75], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "",
                "1234".as_bytes(),
                4,
                &[0x0b, 0xd3, 0xe2, 0x56, 0x33, 0xbf, 0x5c, 0x6f, 0xe1, 0x5e, 0x09, 0x96, 0xa8, 0xa5, 0x61, 0xe3, 0x5b, 0x71, 0xe9, 0xf2, 0x50, 0x99, 0xf2, 0xc5, 0x57, 0x80, 0x01, 0x96, 0x4e, 0xc4, 0x18, 0x0f, 0xfe, 0x8c, 0x72, 0x8f, 0xc2, 0xde, 0x25, 0x6a, 0x96, 0x02, 0x1d, 0x0b, 0xb4, 0xd7, 0x19, 0x4b]
            ).unwrap()
        );

        assert_eq!(
            vec![0x47, 0x57, 0x6c, 0x66, 0x34, 0x72, 0x36, 0x51, 0x65, 0x51, 0x4c, 0x6b, 0x42, 0x39, 0x4d, 0x67, 0x38, 0x4c, 0x79, 0x34, 0x51, 0x50, 0x4a, 0x36, 0x4f, 0x4b], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "12345678",
                "123456781234".as_bytes(),
                5,
                &[0x75, 0x8b, 0x0e, 0x98, 0x4f, 0x82, 0x76, 0xee, 0x0b, 0x53, 0xb4, 0xe4, 0x52, 0xa2, 0x24, 0x33, 0xe2, 0x48, 0xd4, 0xb0, 0x3b, 0xa4, 0xd9, 0x3d, 0xc4, 0x89, 0x2c, 0x8b, 0xf2, 0xbc, 0x24, 0xf1, 0x8c, 0xc4, 0xec, 0x71, 0xb8, 0xbf, 0x9f, 0x5d, 0x92, 0xa9, 0x89, 0x1a, 0x0d, 0xf7]
            ).unwrap()
        );

        assert_eq!(
            vec![0x51, 0x7a, 0x30, 0x77, 0x35, 0x61, 0x77, 0x72, 0x6a, 0x6a, 0x68, 0x46, 0x30, 0x4b], 
            aes128_crypter.generate_key_from_password_and_decrypt(
                "123456789",
                "1234567891234".as_bytes(),
                6,
                &[0x44, 0x16, 0xdb, 0x3f, 0x25, 0x56, 0x1a, 0xe6, 0x9b, 0x6a, 0x39, 0x53, 0x7c, 0xf9, 0x83, 0x83, 0xc0, 0x4e, 0x13, 0xae, 0x04, 0xa8, 0xfb, 0x9c, 0xe3, 0xce, 0xfb, 0x27, 0x55, 0x0d, 0x81, 0x8a, 0x8c, 0xad]
            ).unwrap()
        );

    }

}