use super::super::cryptography::*;
use super::super::super::error::*;
use super::nfold_dk::*;


pub fn aes_hmac_sh1_decrypt(key: &[u8], ciphertext: &[u8], aes_sizes: &AesSizes) -> KerberosResult<Vec<u8>> {
    let ki = dk(key, &[0x0, 0x0, 0x0, 0x3, 0x55], aes_sizes);
    let ke = dk(key, &[0x0, 0x0, 0x0, 0x3, 0xaa], aes_sizes);

    if ciphertext.len() < aes_sizes.block_size() + aes_sizes.mac_size() {
        return Err(KerberosCryptographyErrorKind::DecryptionError("Ciphertext too short".to_string()))?;
    }

    let ciphertext_end_index = ciphertext.len() - aes_sizes.mac_size();
    let pure_ciphertext = &ciphertext[0..ciphertext_end_index];
    let mac = &ciphertext[ciphertext_end_index..];

    let plaintext = basic_decrypt(&ke, &pure_ciphertext, aes_sizes)?;

    let calculated_mac = hmac_sha1(&ki, &plaintext);

    if calculated_mac[..aes_sizes.mac_size()] != mac[..] {
        return Err(KerberosCryptographyErrorKind::DecryptionError("Hmac integrity failure".to_string()))?;
    }

    return Ok(plaintext[aes_sizes.block_size()..].to_vec());
}


fn basic_decrypt(key: &[u8], ciphertext: &[u8], aes_sizes: &AesSizes) -> KerberosResult<Vec<u8>> {
    if ciphertext.len() == aes_sizes.block_size() {
        let plaintext = decrypt_aes_ecb(key, ciphertext, aes_sizes);
        return Ok(plaintext);
    }

    let blocks = divide_in_n_bytes_blocks(&ciphertext, aes_sizes.block_size());

    let second_last_index = blocks.len() - 2;

    let (mut plaintext, previous_block) = decrypt_several_blocks_xor_aes_ecb(
        key, &blocks[0..second_last_index], aes_sizes
    );

    let mut last_plaintext = decrypt_last_two_blocks(
        key, &blocks[second_last_index..], &previous_block, aes_sizes
    );
    
    plaintext.append(&mut last_plaintext);
    
    return Ok(plaintext);
}


fn divide_in_n_bytes_blocks(v: &[u8], nbytes: usize) -> Vec<Vec<u8>> {
    let mut blocks: Vec<Vec<u8>> = Vec::new();

    let mut i = 0;
    while i < v.len() {
        let mut j = i + nbytes;
        if j > v.len() {
            j = v.len();
        }

        blocks.push(v[i..j].to_vec());
        i += nbytes;
    }

    return blocks;
}

fn decrypt_several_blocks_xor_aes_ecb(key: &[u8], blocks: &[Vec<u8>], aes_sizes: &AesSizes) -> (Vec<u8>, Vec<u8>) {
    let mut plaintext: Vec<u8> = Vec::new();
    let mut previous_block = vec![0; aes_sizes.block_size()];

    for block in blocks.iter() {
        let mut block_plaintext = decrypt_aes_ecb(key, block, aes_sizes);
        block_plaintext = xorbytes(&block_plaintext, &previous_block);

        plaintext.append(&mut block_plaintext);
        previous_block = block.clone();
    }

    return (plaintext, previous_block);
}

fn decrypt_last_two_blocks(key: &[u8], blocks: &[Vec<u8>], previous_block: &[u8], aes_sizes: &AesSizes) -> Vec<u8> {
    let second_last_block_plaintext =  decrypt_aes_ecb(key, &blocks[0], aes_sizes);

    let last_block_length =  blocks[1].len();
    let mut last_block = blocks[1].to_vec();

    let mut last_plaintext = xorbytes(
        &second_last_block_plaintext[0..last_block_length], 
        &last_block
    );

    let mut omitted = second_last_block_plaintext[last_block_length..].to_vec();    

    last_block.append(&mut omitted);

    let last_block_plaintext = decrypt_aes_ecb(key, &last_block, aes_sizes);

    let mut plaintext = Vec::new();
    plaintext.append(&mut xorbytes(&last_block_plaintext, &previous_block));
    plaintext.append(&mut last_plaintext);

    return plaintext;
}


#[cfg(test)]
mod test {
    use super::*;

    fn aes_256_hmac_sh1_decrypt(key: &[u8], ciphertext: &[u8]) -> KerberosResult<Vec<u8>> {
        return aes_hmac_sh1_decrypt(key, ciphertext, &AesSizes::Aes256);
    }

    #[test]
    fn test_aes_256_hmac_sh1_decrypt() {
        let key = [
            0xd3, 0x30, 0x1f, 0x0f, 0x25, 0x39, 0xcc, 0x40, 
            0x26, 0xa5, 0x69, 0xf8, 0xb7, 0xc3, 0x67, 0x15, 
            0xc8, 0xda, 0xef, 0x10, 0x9f, 0xa3, 0xd8, 0xb2, 
            0xe1, 0x46, 0x16, 0xaa, 0xca, 0xb5, 0x49, 0xfd
        ];
        
        
        let ciphertext = [
            0xe2, 0xbb, 0xa9, 0x28, 0x8e, 0x2e, 0x2e, 0x3e, 0xf5, 0xfa, 0xee, 0x6d, 0x9e, 0xde, 0x0e, 0x77,
            0x38, 0x70, 0x9b, 0xca, 0xc4, 0x74, 0x6f, 0x7f, 0x00, 0xbf, 0xc7, 0x92, 0x30, 0x30, 0x98, 0xd5,
            0x29, 0x76, 0x49, 0xab, 0x92, 0x31, 0x7f, 0x7b, 0xbe, 0x49, 0x4b, 0x37, 0xe7, 0xf9, 0x33, 0x0f,
            0x14, 0x88, 0x8e, 0x4c, 0xda, 0xb8, 0x80, 0xfb, 0x84, 0xde, 0x97, 0xd9, 0x02, 0xb7, 0x44, 0x4d,
            0x66, 0x73, 0x5a, 0x62, 0xcf, 0x47, 0xc4, 0x42, 0x69, 0xba, 0xdb, 0x64, 0x8b, 0x61, 0x61, 0x71,
            0xeb, 0xc1, 0xf6, 0x10, 0x01, 0x26, 0x65, 0xa0, 0xab, 0x8d, 0x30, 0xad, 0xa9, 0x13, 0x30, 0xda,
            0x74, 0x6a, 0xd7, 0x00, 0xa7, 0x24, 0x16, 0x1d, 0x99, 0xe0, 0x7c, 0xb9, 0x77, 0x98, 0x3e, 0x04,
            0x3d, 0xa7, 0x21, 0x6b, 0xee, 0xec, 0x1a, 0xb1, 0x68, 0xb9, 0x93, 0xf9, 0x06, 0xdb, 0xce, 0x2e,
            0x51, 0x77, 0x56, 0xd7, 0x8f, 0xe1, 0x36, 0xc8, 0x6a, 0xca, 0xb1, 0x3d, 0x71, 0xdf, 0x8d, 0x0c,
            0x83, 0x68, 0x9b, 0x9b, 0xe8, 0xc9, 0xe7, 0x0f, 0xf3, 0x5e, 0xd2, 0xc6, 0x8c, 0xad, 0xf0, 0x93,
            0x4e, 0xe8, 0xac, 0x9a, 0xe5, 0x84, 0x25, 0x5d, 0xde, 0x5f, 0xb9, 0x48, 0xbe, 0xd5, 0x93, 0xc7,
            0x53, 0xd7, 0xe8, 0x86, 0xd4, 0xc5, 0x5a, 0xfd, 0xab, 0xe0, 0x5d, 0x75, 0x87, 0x8b, 0x5b, 0x06,
            0x09, 0x4d, 0xd7, 0x0a, 0x35, 0x91, 0xee, 0x68, 0x8b, 0x91, 0x34, 0x38, 0x43, 0x75, 0x9a, 0xaf,
            0x20, 0xf7, 0x32, 0x61, 0xe6, 0xea, 0xcb, 0x8d, 0x7c, 0x34, 0x55, 0x8a, 0x08, 0x26, 0x96, 0x79,
            0xff, 0xbd, 0x74, 0x0c, 0x8a, 0x7c, 0xb2, 0xfb, 0x06, 0x90, 0xc3, 0xf5, 0x77, 0xba, 0x3a, 0x53,
            0x0c, 0x6f, 0x41, 0x4d, 0x35, 0xe8, 0x0c, 0x75, 0x4e, 0x14, 0x90, 0xdc, 0xf1, 0xa7, 0x70, 0x5f,
            0xe1, 0x90, 0xa4, 0x54, 0xdc, 0x5f, 0xb8, 0x18, 0x41, 0x5f, 0xfc, 0xc1, 0xe6, 0x5f, 0xf9, 0x54,
            0x77, 0xf5, 0x5c, 0x7b, 0x31, 0xf0, 0xd2, 0xcf, 0x05, 0x35, 0x12, 0xea, 0xdb, 0xfc, 0x80, 0x71,
            0xf8, 0xcc, 0x4a, 0x2d, 0x3b, 0x54, 0xf2, 0xde, 0xe2, 0x20, 0x32, 0x7e, 0xf1, 0xa7, 0x14, 0x25,
            0x1b, 0x88, 0x38, 0x0e, 0x24, 0x46, 0x04, 0x09, 0x87, 0xf9, 0xd6, 0xe1, 0xce, 0x3b, 0xe8, 0x42,
            0x95, 0xb7, 0x6c, 0x75, 0xc0, 0x7d, 0x13, 0xa0, 0x7b
        ];

        let plaintext: Vec<u8> = vec![
            0x79, 0x82, 0x01, 0x29, 0x30, 0x82, 0x01, 0x25,
            0xa0, 0x2b, 0x30, 0x29, 0xa0, 0x03, 0x02, 0x01,
            0x12, 0xa1, 0x22, 0x04, 0x20, 0x63, 0x7b, 0x4d,
            0x21, 0x38, 0x22, 0x5a, 0x3a, 0x0a, 0xd7, 0x93,
            0x5a, 0xf3, 0x31, 0x22, 0x68, 0x50, 0xeb, 0x53,
            0x1d, 0x2d, 0x40, 0xf2, 0x19, 0x19, 0xd0, 0x08,
            0x41, 0x91, 0x72, 0x17, 0xff, 0xa1, 0x1c, 0x30,
            0x1a, 0x30, 0x18, 0xa0, 0x03, 0x02, 0x01, 0x00,
            0xa1, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x39,
            0x30, 0x34, 0x31, 0x38, 0x30, 0x36, 0x30, 0x30,
            0x33, 0x31, 0x5a, 0xa2, 0x06, 0x02, 0x04, 0x06,
            0x3c, 0xc3, 0x54, 0xa3, 0x11, 0x18, 0x0f, 0x32,
            0x30, 0x33, 0x37, 0x30, 0x39, 0x31, 0x34, 0x30,
            0x32, 0x34, 0x38, 0x30, 0x35, 0x5a, 0xa4, 0x07,
            0x03, 0x05, 0x00, 0x40, 0xe0, 0x00, 0x00, 0xa5,
            0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x39, 0x30,
            0x34, 0x31, 0x38, 0x30, 0x36, 0x30, 0x30, 0x33,
            0x31, 0x5a, 0xa6, 0x11, 0x18, 0x0f, 0x32, 0x30,
            0x31, 0x39, 0x30, 0x34, 0x31, 0x38, 0x30, 0x36,
            0x30, 0x30, 0x33, 0x31, 0x5a, 0xa7, 0x11, 0x18,
            0x0f, 0x32, 0x30, 0x31, 0x39, 0x30, 0x34, 0x31,
            0x38, 0x31, 0x36, 0x30, 0x30, 0x33, 0x31, 0x5a,
            0xa8, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x39,
            0x30, 0x34, 0x32, 0x35, 0x30, 0x36, 0x30, 0x30,
            0x33, 0x31, 0x5a, 0xa9, 0x10, 0x1b, 0x0e, 0x4b,
            0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x2e, 0x48,
            0x45, 0x41, 0x52, 0x54, 0x53, 0xaa, 0x23, 0x30,
            0x21, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa1, 0x1a,
            0x30, 0x18, 0x1b, 0x06, 0x6b, 0x72, 0x62, 0x74,
            0x67, 0x74, 0x1b, 0x0e, 0x4b, 0x49, 0x4e, 0x47,
            0x44, 0x4f, 0x4d, 0x2e, 0x48, 0x45, 0x41, 0x52,
            0x54, 0x53, 0xab, 0x1d, 0x30, 0x1b, 0x30, 0x19,
            0xa0, 0x03, 0x02, 0x01, 0x14, 0xa1, 0x12, 0x04,
            0x10, 0x48, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x42,
            0x41, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x20, 0x20,
            0x20, 0xac, 0x12, 0x30, 0x10, 0x30, 0x0e, 0xa1,
            0x04, 0x02, 0x02, 0x00, 0xa5, 0xa2, 0x06, 0x04,
            0x04, 0x1f, 0x00, 0x00, 0x00
        ];

        assert_eq!(plaintext, aes_256_hmac_sh1_decrypt(&key, &ciphertext).unwrap());
    }

}